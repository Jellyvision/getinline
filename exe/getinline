#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'getinline'
require 'optparse'

options = {}

option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "A CSS inliner for Ruby ERB templates.\n\n"
  opts.define_head 'Usage: getinline <optional path> [options]'
  opts.separator ''
  opts.separator 'Examples:'
  opts.separator "  #{executable_name} ./public/index.html"
  opts.separator "  #{executable_name} < ./public/index.html"
  opts.separator "  cat ./public/index.html | #{executable_name}"
  opts.separator ''
  opts.separator 'Options:'

  opts.on('--mode MODE', [:html, :txt], 'Output: html or txt') do |v|
    options[:mode] = v
  end

  opts.on('-h', '--help', 'Print usage instructions') do
    puts option_parser
    exit
  end

  # TODO: Ideally this gem would be an option within premailer and unfortunately
  # there is no way to extend the premailer CLI or interface with its options so
  # copying the options from premailer/executor is a temporary solution.
  # Github issue: https://github.com/premailer/premailer/issues/259
  opts.separator ''
  opts.separator 'Premailer Options:'

  opts.on('-b', '--base-url STRING', String, 'Base URL, useful for local files') do |v|
    options[:base_url] = v
  end

  opts.on('-q', '--query-string STRING', String, 'Query string to append to links') do |v|
    options[:link_query_string] = v
  end

  opts.on('--css FILE,FILE', Array, 'Additional CSS stylesheets') do |v|
    options[:css] = v
  end

  opts.on('-r', '--remove-classes', 'Remove HTML classes') do |v|
    options[:remove_classes] = v
  end

  opts.on('-j', '--remove-scripts', 'Remove <script> elements') do |v|
    options[:remove_classes] = v
  end

  opts.on('-l', '--line-length N', Integer, "Line length for plaintext (default: #{options[:line_length]})") do |v|
    options[:line_length] = v
  end

  opts.on('-n', '--no-entities', 'Output UTF-8 instead of HTML entities when using Nokogiri') do
    options[:output_encoding] = nil
  end

  opts.on('-d', '--io-exceptions', 'Abort on I/O errors') do |v|
    options[:io_exceptions] = v
  end

  opts.on('-v', '--verbose', 'Print additional information at runtime') do |v|
    options[:verbose] = v
  end
end

begin
  option_parser.parse!
rescue OptionParser::InvalidOption => error
  abort "Getinline doesn't recognize that #{error}"
rescue OptionParser::AmbiguousOption => error
  abort "That's an #{error}"
end

def transform(file_contents, options)
  transformer = Getinline::Transformer.new(file_contents, options)
  puts transformer.transform
end

if ARGF.filename != '-' || (!STDIN.tty? && !STDIN.closed?)
  transform(ARGF.read, options)
else
  puts option_parser
  exit
end
